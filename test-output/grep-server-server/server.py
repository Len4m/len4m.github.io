#!/usr/bin/env python3

"""
MCP server for grep command
Generated by MCP Creator - https://github.com/modelcontextprotocol/mcp
"""

import asyncio
import json
import sys
from typing import Any, Dict, List, Optional

from mcp.server.models import InitializationOptions
from mcp.server import NotificationOptions, Server
from mcp.server.stdio import stdio_server
from mcp.types import (
    CallToolRequest,
    CallToolResult,
    ListToolsRequest,
    ListToolsResult,
    Tool,
    TextContent,
)

server = Server("grep-server")

@server.list_tools()
async def handle_list_tools() -> ListToolsResult:
    """List available tools."""
    return ListToolsResult(
        tools=[
            Tool(
                name="grep",
                description="MCP server for grep command",
                inputSchema={
                    "type": "object",
                    "properties": {
            "--help": {
                "type": "boolean",
                "description": "Show help information",
                "required": False
            },
            "--version": {
                "type": "boolean",
                "description": "Show version information",
                "required": False
            }
                    }
                }
            )
        ]
    )

@server.call_tool()
async def handle_call_tool(request: CallToolRequest) -> CallToolResult:
    """Handle tool execution requests."""
    
    if request.name == "grep":
        return await execute_tool(request.arguments or {})
    
    raise ValueError(f"Unknown tool: {request.name}")

async def execute_tool(args: Dict[str, Any]) -> CallToolResult:
    """Execute the grep tool."""
    try:
        # Simulación de ejecución del comando
        result = f"Executed grep with args: {json.dumps(args)}"
        
        return CallToolResult(
            content=[
                TextContent(
                    type="text",
                    text=result
                )
            ]
        )
    except Exception as error:
        return CallToolResult(
            content=[
                TextContent(
                    type="text",
                    text=f"Error: {error}"
                )
            ]
        )

def main():
    """Run the server using stdin/stdout streams."""
    async def arun():
        async with stdio_server() as (read_stream, write_stream):
            await server.run(
                read_stream,
                write_stream,
                InitializationOptions(
                    server_name="grep-server",
                    server_version="1.0.0",
                    capabilities=server.get_capabilities(
                        notification_options=NotificationOptions(),
                        experimental_capabilities={},
                    ),
                ),
            )

    asyncio.run(arun())

if __name__ == "__main__":
    main()
