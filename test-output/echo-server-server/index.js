#!/usr/bin/env node

/**
 * MCP server for echo command
 * Generated by MCP Creator - https://github.com/modelcontextprotocol/mcp
 */

const { Server } = require('@modelcontextprotocol/sdk/server/index.js');
const { StdioServerTransport } = require('@modelcontextprotocol/sdk/server/stdio.js');
const { 
  CallToolRequestSchema, 
  ErrorCode, 
  ListToolsRequestSchema, 
  McpError 
} = require('@modelcontextprotocol/sdk/types.js');

class echoserverServer {
  constructor() {
    this.server = new Server(
      { name: "echo-server", version: "1.0.0" },
      { capabilities: { tools: {} } }
    );
    
    this.setupHandlers();
  }

  setupHandlers() {
    this.server.setRequestHandler(ListToolsRequestSchema, async () => ({
      tools: [
        {
          name: "echo",
          description: "MCP server for echo command",
          inputSchema: {
            type: "object",
            properties: {
    __help: {
      type: "boolean",
      description: "Show help information",
      required: false
    },
    __version: {
      type: "boolean",
      description: "Show version information",
      required: false
    }
            },
            required: []
          }
        }
      ]
    }));

    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {
      const { name, arguments: args } = request.params;
      
      if (name === "echo") {
        return await this.executeTool(args);
      }
      
      throw new McpError(ErrorCode.MethodNotFound, `Unknown tool: ${name}`);
    });
  }

  async executeTool(args) {
    try {
      // Simulación de ejecución del comando
      const result = `Executed echo with args: ${JSON.stringify(args)}`;
      
      return {
        content: [
          {
            type: "text",
            text: result
          }
        ]
      };
    } catch (error) {
      return {
        content: [
          {
            type: "text", 
            text: `Error: ${error.message}`
          }
        ]
      };
    }
  }

  async run() {
    const transport = new StdioServerTransport();
    await this.server.connect(transport);
    console.error("echo-server MCP Server running on stdio");
  }
}

if (require.main === module) {
  const server = new echoserverServer();
  server.run().catch(console.error);
}

module.exports = echoserverServer;
