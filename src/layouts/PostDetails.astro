---
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Tag from "@components/Tag.astro";
import type { CollectionEntry } from "astro:content";
import { slugifyStr } from "@utils/slugify";
import ShareLinks from "@components/ShareLinks.astro";
import { LOCALE, SITE } from "@config";
import { getLocale } from "astro-i18n-aut";
import Dateposts from "@components/Dateposts";

const locale = getLocale(Astro.url);
LOCALE.lang = locale;

export interface Props {
  post: CollectionEntry<"blog">;
}

const { post } = Astro.props;

const {
  title,
  author,
  description,
  ogImage,
  canonicalURL,
  pubDatetime,
  modDatetime,
  tags,
  lang,
} = post.data;

const { Content } = await post.render();

const ogImageUrl = typeof ogImage === "string" ? ogImage : ogImage?.src;
const ogUrl = new URL(
  ogImageUrl ?? `/posts/${slugifyStr(title)}.png`,
  Astro.url.origin
).href;

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  pubDatetime,
  modDatetime,
  canonicalURL,
  ogImage: ogUrl,
  scrollSmooth: true,
  lang,
};

let toptxt = "Back to Top" as string;
let gobacktxt = "Go back" as string;
switch (LOCALE.lang) {
  case "es":
    toptxt = "Volver al inicio";
    gobacktxt = "Volver";
    break;
  case "ca":
    toptxt = "Tornar a l'inici";
    gobacktxt = "Tornar";
    break;
}
---

<Layout {...layoutProps}>
  <Header />

  <div class="mx-auto flex w-full max-w-3xl justify-start px-2">
    <button
      class="focus-outline mb-2 mt-8 flex hover:opacity-75"
      onclick="(() => (history.length === 1) ? window.location = `/${LOCALE.lang}/` : history.back())()"
    >
      <svg xmlns="http://www.w3.org/2000/svg"
        ><path
          d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
        ></path>
      </svg><span>{gobacktxt}</span>
    </button>
  </div>
  <main id="main-content">
    <h1 transition:name={slugifyStr(title)} class="post-title">{title}</h1>

    <Dateposts
      pubDatetime={pubDatetime}
      modDatetime={modDatetime}
      size="lg"
      className="my-2"
    />
    <article id="article" class="prose mx-auto mt-8 max-w-3xl">
      <Content />
    </article>

    <ul class="my-8">
      {tags.map((tag: string) => <Tag lang={locale} tag={slugifyStr(tag)} />)}
    </ul>

    <button
      id="back-to-top"
      class="focus-outline sticky bottom-4 float-right whitespace-nowrap rounded-lg bg-skin-fill px-3 py-1 opacity-75 transition-all duration-300 hover:opacity-100 hidden"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="rotate-90">
        <path
          d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
        ></path>
      </svg>
      <span>{toptxt}</span>
    </button>
    <div
      class="flex flex-col-reverse items-center justify-between gap-6 sm:flex-row-reverse sm:items-end sm:gap-4"
    >
      <div></div>
      <ShareLinks />
    </div>
  </main>
  <Footer />
</Layout>

<style>
  main {
    @apply mx-auto w-full max-w-3xl px-4 pb-12;
  }
  .post-title {
    @apply text-2xl font-semibold text-skin-accent;
  }
  img {
    @apply cursor-zoom-in;
  }
</style>
<script is:inline src="/medium-zoom/medium-zoom.min.js"></script>
<script is:inline>
  /** Create a progress indicator
   *  at the top */
  function createProgressBar() {
    // Create the main container div
    const progressContainer = document.createElement("div");
    progressContainer.className =
      "progress-container fixed top-0 z-10 h-1 w-full bg-skin-fill";

    // Create the progress bar div
    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-1 w-0 bg-skin-accent";
    progressBar.id = "myBar";

    // Append the progress bar to the progress container
    progressContainer.appendChild(progressBar);

    // Append the progress container to the document body
    document.body.insertBefore(progressContainer, document.body.firstChild);
  }

  /** Update the progress bar
   *  when user scrolls */
  function updateScrollProgress() {
    const winScroll =
      document.body.scrollTop || document.documentElement.scrollTop;
    const height =
      document.documentElement.scrollHeight -
      document.documentElement.clientHeight;
    const scrolled = (winScroll / height) * 100;
    if (document) {
      const myBar = document.getElementById("myBar");
      if (myBar) {
        myBar.style.width = scrolled + "%";
      }
    }
  }

  // Ejecutar cuando el DOM esté listo
  document.addEventListener("DOMContentLoaded", () => {
    createProgressBar();
    document.addEventListener("scroll", updateScrollProgress);
  });

  // Ejecutar después de las transiciones de vista
  document.addEventListener("astro:after-swap", () => {
    createProgressBar();
    document.addEventListener("scroll", updateScrollProgress);
  });

  /** Attaches links to headings in the document,
   *  allowing sharing of sections easily */
  function addHeadingLinks() {
    let headings = Array.from(document.querySelectorAll("h2, h3, h4, h5, h6"));
    for (let heading of headings) {
      heading.classList.add("group");
      const link = document.createElement("a");
      link.className =
        "heading-link ml-2 opacity-0 group-hover:opacity-100 focus:opacity-100";
      link.href = "#" + heading.id;

      const span = document.createElement("span");
      span.ariaHidden = "true";
      span.innerText = "#";
      link.appendChild(span);
      heading.appendChild(link);
    }
  }
  addHeadingLinks();

  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  function attachCopyButtons() {
    let copyButtonLabel = "Copy";
    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (let codeBlock of codeBlocks) {
      let copyButton = document.createElement("button");
      copyButton.className =
        "copy-code ml-auto rounded bg-skin-card px-2 py-1 text-xs leading-4 text-skin-base font-medium";
      copyButton.innerHTML = copyButtonLabel;
      codeBlock.setAttribute("tabindex", "0");

      // Creamos un contenedor flex
      let flexContainer = document.createElement("div");
      flexContainer.style.display = "flex";
      flexContainer.style.flexDirection = "column";

      // Movemos el pre al contenedor flex
      codeBlock?.parentNode?.insertBefore(flexContainer, codeBlock);
      flexContainer.appendChild(copyButton);
      flexContainer.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      let code = block.querySelector("code");
      let text = code?.innerText;

      await navigator.clipboard.writeText(text ?? "");

      // visual feedback that task is completed
      button.innerText = "Copied";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }
  attachCopyButtons();

  /** Scrolls the document to the top when
   * the "Back to Top" button is clicked. */
  function backToTop() {
    document.querySelector("#back-to-top")?.addEventListener("click", () => {
      document.body.scrollTop = 0; // For Safari
      document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
    });
  }
  backToTop();

  // Manejar el zoom de imágenes
  mediumZoom(document.querySelectorAll("#article img"), {
    background: "#000000",
  });

  /** Maneja la tabla de contenidos y el scroll */
  function handleTocLinks() {
    const tocLinks = document.querySelectorAll(".prose details a");
    const tocDetails = document.querySelector(".prose details");

    // Función para manejar el scroll suave
    function handleSmoothScroll(targetElement) {
      const headerOffset = 45;
      const elementPosition = targetElement.getBoundingClientRect().top;
      const elementMargin = parseInt(
        window.getComputedStyle(targetElement).marginTop
      );
      const offsetPosition =
        elementPosition + window.scrollY - headerOffset - elementMargin;

      window.scrollTo({
        top: offsetPosition,
        behavior: "smooth",
      });

      setTimeout(() => {
        const finalPosition =
          targetElement.getBoundingClientRect().top +
          window.scrollY -
          headerOffset;
        window.scrollTo({
          top: finalPosition,
          behavior: "smooth",
        });
      }, 100);
    }

    // Cerrar al hacer clic fuera
    document.addEventListener("click", e => {
      if (tocDetails && tocDetails.hasAttribute("open")) {
        const isClickInside = tocDetails.contains(e.target);
        if (!isClickInside) {
          tocDetails.removeAttribute("open");
          document.querySelectorAll(".copy-code").forEach(element => {
            element.style.zIndex = "1";
            element.style.visibility = "";
          });
          document.querySelectorAll("blockquote").forEach(element => {
            element.style.zIndex = "1";
            element.style.position = "";
          });
        }
      }
    });

    // Manejar el despliegue de la tabla de contenidos
    tocDetails?.addEventListener("toggle", e => {
      const isOpen = e.target.hasAttribute("open");
      document.querySelectorAll(".copy-code").forEach(element => {
        element.style.visibility = isOpen ? "hidden" : "";
        element.style.zIndex = isOpen ? "-1" : "1";
      });
      document.querySelectorAll("blockquote").forEach(element => {
        element.style.zIndex = isOpen ? "-1" : "1";
        element.style.position = isOpen ? "relative" : "";
      });
    });

    // Manejar clics en los enlaces de la tabla de contenidos
    tocLinks.forEach(link => {
      link.addEventListener("click", e => {
        if (tocDetails) {
          tocDetails.removeAttribute("open");
        }

        const targetId = decodeURIComponent(
          link.getAttribute("href").substring(1)
        );
        const targetElement = document.getElementById(targetId);

        if (targetElement) {
          handleSmoothScroll(targetElement);
        }
      });
    });

    // Manejar todos los enlaces que apuntan a anclas
    document.querySelectorAll('a[href^="#"]').forEach(link => {
      link.addEventListener("click", e => {
        const targetId = decodeURIComponent(
          link.getAttribute("href").substring(1)
        );
        const targetElement = document.getElementById(targetId);

        if (targetElement) {
          handleSmoothScroll(targetElement);
        }
      });
    });
  }
  handleTocLinks();

  /** Muestra/oculta el botón de volver arriba */
  function handleBackToTop() {
    const backToTopButton = document.querySelector("#back-to-top");
    
    window.addEventListener("scroll", () => {
      if (window.scrollY > 300) {
        backToTopButton?.classList.remove("hidden");
      } else {
        backToTopButton?.classList.add("hidden");
      }
    });
  }
  
  handleBackToTop();
  
  // Ejecutar después de las transiciones de vista
  document.addEventListener("astro:after-swap", () => {
    handleBackToTop();
  });
</script>
