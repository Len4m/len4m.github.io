export interface Translations {
  title: string;
  label: string;
  placeholder: string;
  buttonText: string;
  processingText: string;
  instructions: string;
  step1: string;
  step2: string;
  step3: string;
  step4: string;
  characters: string;
  successMessage: string;
  errorMessage: string;
  binaryHelpLabel: string;
  binaryHelpPlaceholder: string;
  languageLabel: string;
  nodejs: string;
  python: string;
  serverConfigLabel: string;
  serverNameLabel: string;
  serverNamePlaceholder: string;
  serverDescriptionLabel: string;
  serverDescriptionPlaceholder: string;
  serverVersionLabel: string;
  serverVersionPlaceholder: string;
  binaryNameLabel: string;
  binaryNamePlaceholder: string;
  parseButtonText: string;
  parsingText: string;
  generateButtonText: string;
  generatingText: string;
  downloadButtonText: string;
  parsedParametersLabel: string;
  noParametersFound: string;
  copyToClipboard: string;
  copiedToClipboard: string;
  filterAll: string;
  filterFlags: string;
  filterOptions: string;
  filterArguments: string;
  takesValue: string;
  noParametersOfType: string;
  installationTitle: string;
  prerequisitesTitle: string;
  prerequisites1: string;
  prerequisites2: string;
  installationStepsTitle: string;
  installationStep1: string;
  installationStep2: string;
  installationStep3: string;
  usingWithLLMsTitle: string;
  claudeDesktop: string;
  otherLLMs: string;
  testing: string;
  claudeDesktopLink: string;
  otherLLMsLink: string;
  testingText: string;
  securityNotesTitle: string;
  securityNote1: string;
  securityNote2: string;
  securityNote3: string;
  editParametersTitle: string;
  editParameterLabel: string;
  parameterNameLabel: string;
  parameterDescriptionLabel: string;
  parameterTypeLabel: string;
  parameterRequiredLabel: string;
  parameterTakesValueLabel: string;
  parameterExpectsValueLabel: string;
  saveChangesLabel: string;
  cancelLabel: string;
  yes: string;
  no: string;
  flag: string;
  option: string;
  argument: string;
  flagDescription: string;
  optionDescription: string;
  argumentDescription: string;
  flagHelp: string;
  optionHelp: string;
  argumentHelp: string;
  generateMCPHelp: string;
  addParameterLabel: string;
  deleteParameterLabel: string;
  addNewParameterLabel: string;
  newParameterLabel: string;
  newParameterPlaceholder: string;
  newParameterDescriptionLabel: string;
  newParameterDescriptionPlaceholder: string;
  parameterNamePlaceholderFlag: string;
  parameterNamePlaceholderOption: string;
  parameterNamePlaceholderArgument: string;
  analyzedParametersLabel: string;
  mcpDescription: string;
  mcpOfficialDocs: string;
  mcpOfficialDocsLink: string;
  claudeDesktopText: string;
  otherLLMsText: string;
  ollamaText: string;
  ollamaLink: string;
  configureMCPText: string;
  chatgptText: string;
  chatgptLink: string;
  chatgptHelpText: string;
  editCodeLabel: string;
  generatedCodeLabel: string;
  securityConfigLabel: string;
  enableSecurityLabel: string;
  securityLevelLabel: string;
  securityLevelBasic: string;
  securityLevelIntermediate: string;
  securityLevelAdvanced: string;
  restrictionsLabel: string;
  allowedHostsLabel: string;
  allowedHostsPlaceholder: string;
  forbiddenPatternsLabel: string;
  forbiddenPatternsPlaceholder: string;
  maxExecutionTimeLabel: string;
  allowedUsersLabel: string;
  allowedUsersPlaceholder: string;
  maxMemoryLabel: string;
  sandboxingLabel: string;
  useContainerLabel: string;
  networkIsolationLabel: string;
  filesystemRestrictionsLabel: string;
  filesystemRestrictionsPlaceholder: string;
  runAsUserLabel: string;
  runAsUserPlaceholder: string;
  validationLabel: string;
  enableInputSanitizationLabel: string;
  enableOutputFilteringLabel: string;
  enableCommandWhitelistLabel: string;
  parameterSecurityLabel: string;
  addParameterSecurityLabel: string;
  securityHelpText: string;
  securityBasicHelp: string;
  securityIntermediateHelp: string;
  securityAdvancedHelp: string;
  validationErrors: string;
  binaryNameHelp: string;
  serverNameHelp: string;
  versionHelp: string;
  descriptionHelp: string;
  securityTitle: string;
  securityEnabledBinary: string;
  securityEnabledServer: string;
  securityDisabledBinary: string;
  securityDisabledServer: string;
  workingDirectoryLabel: string;
  workingDirectoryPlaceholder: string;
  workingDirectoryHelp: string;
}

export interface ParsedParameter {
  name: string;
  description: string;
  type: 'option' | 'argument' | 'flag';
  required: boolean;
  defaultValue?: string;
  takesValue: boolean;
  expectsValue: boolean;
}

export interface ServerConfig {
  name: string;
  description: string;
  version: string;
  binaryName: string;
  workingDirectory?: string;
}

export interface ParameterSecurity {
  name: string;
  allowedValues?: string[];
  pattern?: string;
  maxLength?: number;
  sanitize?: boolean;
}

export interface SecurityConfig {
  enabled: boolean;
  level: 'basic' | 'intermediate' | 'advanced';
  restrictions: {
    allowedHosts: string[];
    forbiddenPatterns: string[];
    maxExecutionTime: number;
    allowedUsers: string[];
    maxMemoryMB: number;
  };
  sandboxing: {
    useContainer: boolean;
    networkIsolation: boolean;
    filesystemRestrictions: string[];
    runAsUser: string;
  };
  parameterSecurity: ParameterSecurity[];
  validation: {
    enableInputSanitization: boolean;
    enableOutputFiltering: boolean;
    enableCommandWhitelist: boolean;
  };
} 